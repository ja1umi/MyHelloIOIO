package my.subject.myHelloIOIO;

public abstract class MIDIHellschreiber {
	public final int OPT_FONT5x5 = 0;
	public final int OPT_FONT7x5 = 1;
	private String userStr = "Hellschreiber";
			
	// 5x5 font data (column-by-column)
	private static int[][] font5x5= { 
		{ 0x0, 0x0, 0x0, 0x0, 0x0 },	 //  
		{ 0x0, 0x0, 0x17, 0x0, 0x0 },	 // !
		{ 0x0, 0x3, 0x0, 0x3, 0x0 },	 // "
		{ 0xA, 0x1F, 0xA, 0x1F, 0xA },	 // #
		{ 0x17, 0x15, 0x1F, 0x15, 0x1D },	 // $
		{ 0x11, 0x8, 0x4, 0x2, 0x11 },	 // %
		{ 0xA, 0x15, 0xA, 0x8, 0x14 },	 // &
		{ 0x0, 0x0, 0x3, 0x0, 0x0 },	 // '
		{ 0x0, 0x0, 0xE, 0x11, 0x0 },	 // (
		{ 0x0, 0x11, 0xE, 0x0, 0x0 },	 // )
		{ 0x11, 0xA, 0x1F, 0xA, 0x11 },	 // *
		{ 0x4, 0x4, 0x1F, 0x4, 0x4 },	 // +
		{ 0x0, 0x10, 0x8, 0x0, 0x0 },	 // ,
		{ 0x4, 0x4, 0x4, 0x4, 0x4 },	 // -
		{ 0x0, 0x0, 0x10, 0x0, 0x0 },	 // .
		{ 0x10, 0x8, 0x4, 0x2, 0x1 },	 // /
		{ 0xE, 0x19, 0x15, 0x13, 0xE },	 // 0
		{ 0x0, 0x0, 0x1F, 0x0, 0x0 },	 // 1
		{ 0x12, 0x11, 0x19, 0x15, 0x12 },	 // 2
		{ 0xA, 0x11, 0x15, 0x15, 0xA },	 // 3
		{ 0xC, 0xA, 0x9, 0x1F, 0x8 },	 // 4
		{ 0x17, 0x15, 0x15, 0x15, 0x1D },	 // 5
		{ 0xE, 0x15, 0x15, 0x15, 0x8 },	 // 6
		{ 0x1, 0x1, 0x19, 0x5, 0x3 },	 // 7
		{ 0xA, 0x15, 0x15, 0x15, 0xA },	 // 8
		{ 0x2, 0x15, 0x15, 0x15, 0xE },	 // 9
		{ 0x0, 0x0, 0xA, 0x0, 0x0 },	 // :
		{ 0x0, 0x10, 0xA, 0x0, 0x0 },	 // ;
		{ 0x0, 0x4, 0xA, 0x11, 0x0 },	 // <
		{ 0xA, 0xA, 0xA, 0xA, 0xA },	 // =
		{ 0x0, 0x11, 0xA, 0x4, 0x0 },	 // >
		{ 0x2, 0x1, 0x19, 0x5, 0x2 },	 // ?
		{ 0xE, 0x11, 0x1D, 0x13, 0xE },	 // @
		{ 0x1C, 0xA, 0x9, 0xA, 0x1C },	 // A
		{ 0x1F, 0x15, 0x15, 0x15, 0xA },	 // B
		{ 0xE, 0x11, 0x11, 0x11, 0xA },	 // C
		{ 0x1F, 0x11, 0x11, 0x11, 0xE },	 // D
		{ 0x1F, 0x15, 0x15, 0x15, 0x15 },	 // E
		{ 0x1F, 0x5, 0x5, 0x5, 0x1 },	 // F
		{ 0xE, 0x11, 0x11, 0x15, 0xC },	 // G
		{ 0x1F, 0x4, 0x4, 0x4, 0x1F },	 // H
		{ 0x0, 0x11, 0x1F, 0x11, 0x0 },	 // I
		{ 0x8, 0x10, 0x10, 0x10, 0xF },	 // J
		{ 0x1F, 0x4, 0x4, 0xA, 0x11 },	 // K
		{ 0x1F, 0x10, 0x10, 0x10, 0x10 },	 // L
		{ 0x1F, 0x2, 0x4, 0x2, 0x1F },	 // M
		{ 0x1F, 0x2, 0x4, 0x8, 0x1F },	 // N
		{ 0xE, 0x11, 0x11, 0x11, 0xE },	 // O
		{ 0x1F, 0x5, 0x5, 0x5, 0x2 },	 // P
		{ 0xE, 0x11, 0x11, 0x19, 0x1E },	 // Q
		{ 0x1F, 0x5, 0x5, 0xD, 0x12 },	 // R
		{ 0x12, 0x15, 0x15, 0x15, 0x9 },	 // S
		{ 0x1, 0x1, 0x1F, 0x1, 0x1 },	 // T
		{ 0xF, 0x10, 0x10, 0x10, 0xF },	 // U
		{ 0x7, 0x8, 0x10, 0x8, 0x7 },	 // V
		{ 0xF, 0x10, 0xF, 0x10, 0xF },	 // W
		{ 0x11, 0xA, 0x4, 0xA, 0x11 },	 // X
		{ 0x1, 0x2, 0x1C, 0x2, 0x1 },	 // Y
		{ 0x11, 0x19, 0x15, 0x13, 0x11 },	 // Z
		{ 0x0, 0x1F, 0x11, 0x11, 0x0 },	 // [
		{ 0x1, 0x2, 0x4, 0x8, 0x10 },	 // back-slash
		{ 0x0, 0x11, 0x11, 0x1F, 0x0 },	 // ]
		{ 0x0, 0x2, 0x1, 0x2, 0x0 },	 // ^
		{ 0x10, 0x10, 0x10, 0x10, 0x10 },	 // _
		{ 0x0, 0x1, 0x2, 0x0, 0x0 },	 // `
		{ 0xC, 0x12, 0x12, 0xC, 0x10 },	 // a
		{ 0x1E, 0x14, 0x14, 0x8, 0x0 },	 // b
		{ 0xC, 0x12, 0x12, 0x12, 0x0 },	 // c
		{ 0x8, 0x14, 0x14, 0x1F, 0x0 },	 // d
		{ 0xE, 0x15, 0x15, 0x6, 0x0 },	 // e
		{ 0x0, 0x4, 0x1F, 0x5, 0x0 },	 // f
		{ 0x0, 0x2, 0x15, 0x15, 0xE },	 // g
		{ 0x0, 0x1F, 0x4, 0x18, 0x0 },	 // h
		{ 0x0, 0x0, 0x1A, 0x0, 0x0 },	 // i
		{ 0x0, 0x10, 0x1D, 0x0, 0x0 },	 // j
		{ 0x0, 0x1F, 0x8, 0x14, 0x0 },	 // k
		{ 0x0, 0x1, 0x1F, 0x0, 0x0 },	 // l
		{ 0x18, 0x4, 0x1C, 0x4, 0x18 },	 // m
		{ 0x18, 0x4, 0x4, 0x18, 0x0 },	 // n
		{ 0xC, 0x12, 0x12, 0xC, 0x0 },	 // o
		{ 0x1C, 0xA, 0xA, 0x4, 0x0 },	 // p
		{ 0x4, 0xA, 0xA, 0x1C, 0x0 },	 // q
		{ 0x1E, 0x4, 0x2, 0x2, 0x0 },	 // r
		{ 0x0, 0x12, 0x15, 0x9, 0x0 },	 // s
		{ 0x0, 0x4, 0x1E, 0x14, 0x0 },	 // t
		{ 0xE, 0x10, 0x10, 0xE, 0x10 },	 // u
		{ 0x0, 0xC, 0x10, 0xC, 0x0 },	 // v
		{ 0xC, 0x10, 0xC, 0x10, 0xC },	 // w
		{ 0x0, 0x14, 0x8, 0x14, 0x0 },	 // x
		{ 0x10, 0xA, 0x4, 0x2, 0x0 },	 // y
		{ 0x0, 0x12, 0x1A, 0x16, 0x0 },	 // z
		{ 0x0, 0x4, 0x1B, 0x11, 0x0 },	 // {
		{ 0x0, 0x0, 0x1F, 0x0, 0x0 },	 // |
		{ 0x0, 0x11, 0x1B, 0x4, 0x0 },	 // }
		{ 0x2, 0x1, 0x2, 0x4, 0x2 },	 // ~
		{ 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }	 // black square
	};

	// 7x5 font data (column-by-column)
	private static int[][] font7x5 = {
		{0, 0, 0, 0, 0},
		{0,  0, 95,  0,  0},    		// !
		{0,  7,  0,  7,  0},    		// "
		{20,127, 20,127, 20},   		// #
		{0x24, 0x2A, 0x7F, 0x2A, 0x12},	// $
		{35, 19,  8,100, 98},   		// %
		{0x36, 0x49, 0x55, 0x22, 0x50},	// &
		{0x00, 0x05, 0x03, 0x00, 0x00},	// '
		{0x00, 0x1C, 0x22, 0x00, 0x00},	// (
		{0x00, 0x41, 0x22, 0x1C, 0x00},	// )
		{73, 42,127, 42, 73},    		// *
		{8,  8,127,  8,  8},     		// +
		{0, 96,  0,  0,  0},     		// ,
		{8,  8,  8,  8,  8},     		// -
		{0, 64,  0,  0,  0},     		// .
		{32, 16,  8,  4,  2},    		// /
		{62, 65, 65, 65, 62},    		// 0
		{68, 66,127, 64, 64},    		// 1
		{121, 73, 73, 73, 70},   		// 2
		{65, 73, 77, 75, 49},    		// 3
		{15,  8,  8,  8,127},    		// 4
		{79, 73, 73, 73, 49},    		// 5
		{60, 74, 73, 73, 49},    		// 6
		{1,  1,121,  5,  3},     		// 7
		{54, 73, 73, 73, 54},    		// 8
		{6,  9,  9,  9,127},     		// 9
		{0x00, 0x36, 0x36, 0x00, 0x00},	// :
		{0x00, 0x56, 0x36, 0x00, 0x00},	// ;
		{8, 20, 34, 65,  0},     		// <
		{20, 20, 20, 20, 20},    		// =
		{0, 65, 34, 20,  8},     		// >
		{0,  1, 89,  9,  6},     		// ?
		{0x32, 0x49, 0x79, 0x41, 0x3E},	// @
		{124, 10,  9, 10,124},   		// A
		{127, 73, 73, 73, 62},   		// B
		{62, 65, 65, 65, 65},    		// C
		{127, 65, 65, 65, 62},   		// D
		{127, 73, 73, 73, 73},   		// E
		{127,  9,  9,  9,  9},   		// F
		{62, 65, 73, 73, 57},    		// G
		{127,  8,  8,  8,127},   		// H
		{65, 65,127, 65, 65},    		// I
		{113, 65, 65,127,  1},   		// J
		{127,  8, 20, 34, 65},   		// K
		{127, 64, 64, 64, 64},   		// L
		{127,  2,  4,  2,127},   		// M
		{127,  4,  8, 16,127},   		// N
		{62, 65, 65, 65, 62},    		// O
		{127,  9,  9,  9,  6},   		// P
		{62, 65, 81, 33, 94},    		// Q
		{127,  9, 25, 41, 70},   		// R
		{70, 73, 73, 73, 49},    		// S
		{1,  1,127,  1,  1},     		// T
		{63, 64, 64, 64, 63},    		// U
		{31, 32, 64, 32, 31},    		// V
		{127, 32, 16, 32,127},   		// W
		{65, 34, 28, 34, 65},    		// X
		{1,  2,124,  2,  1},     		// Y
		{97, 81, 73, 69, 67},    		// Z
		{0,127, 65, 65,  0},     		// [
		{2,  4,  8, 16, 32},     		// (back-slash)
		{0, 65, 65,127,  0},     		// ]
		{0x04, 0x02, 0x01, 0x02, 0x04},	// ^
		{0x40, 0x40, 0x40, 0x40, 0x40},	// _
		{0x00, 0x01, 0x02, 0x04, 0x00},	// `
		{0x20, 0x54, 0x54, 0x54, 0x78},	// a
		{0x7F, 0x48, 0x44, 0x44, 0x38},	// b
		{0x38, 0x44, 0x44, 0x44, 0x20},	// c
		{0x38, 0x44, 0x44, 0x48, 0x7F},	// d
		{0x38, 0x54, 0x54, 0x54, 0x18},	// e
		{0x08, 0x7E, 0x09, 0x01, 0x02},	// f
		{0x0C, 0x52, 0x52, 0x52, 0x3E},	// g
		{0x7F, 0x08, 0x04, 0x04, 0x78},	// h
		{0x00, 0x44, 0x7D, 0x40, 0x00},	// i
		{0x20, 0x40, 0x44, 0x3D, 0x00},	// j
		{0x7F, 0x10, 0x28, 0x44, 0x00},	// k
		{0x00, 0x41, 0x7F, 0x40, 0x00},	// l
		{0x7C, 0x04, 0x18, 0x04, 0x78},	// m
		{0x7C, 0x08, 0x04, 0x04, 0x78},	// n
		{0x38, 0x44, 0x44, 0x44, 0x38},	// o
		{0x7C, 0x14, 0x14, 0x14, 0x08},	// p
		{0x08, 0x14, 0x14, 0x18, 0x7C},	// q
		{0x7C, 0x08, 0x04, 0x04, 0x08},	// r
		{0x48, 0x54, 0x54, 0x54, 0x20},	// s
		{0x04, 0x3F, 0x44, 0x40, 0x20},	// t
		{0x3C, 0x40, 0x40, 0x20, 0x7C},	// u
		{0x1C, 0x20, 0x40, 0x20, 0x1C},	// v
		{0x3C, 0x40, 0x30, 0x40, 0x3C},	// w
		{0x44, 0x28, 0x10, 0x28, 0x44},	// x
		{0x0C, 0x50, 0x50, 0x50, 0x3C},	// y
		{0x44, 0x64, 0x54, 0x4C, 0x44},	// z
		{0x00, 0x08, 0x36, 0x41, 0x00},	// {
		{0x00, 0x00, 0x7F, 0x00, 0x00},	// |
		{0x00, 0x41, 0x36, 0x08, 0x00},	// }
		{0x01, 0x04, 0x01, 0x04, 0x00},	// ~
		{0x7F, 0x7F, 0x7F, 0x7F, 0x7F}	// black square
	};

	// 5x5 font data (row-by-row)
	private static int[][] font5x5Row = {
		{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },	 //  
		{ 0x4, 0x4, 0x4, 0x0, 0x4, 0x0, 0x0 },	 // !
		{ 0xA, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0 },	 // "
		{ 0xA, 0x1F, 0xA, 0x1F, 0xA, 0x0, 0x0 },	 // #
		{ 0x1F, 0x14, 0x1F, 0x5, 0x1F, 0x0, 0x0 },	 // $
		{ 0x11, 0x2, 0x4, 0x8, 0x11, 0x0, 0x0 },	 // %
		{ 0x8, 0x14, 0x9, 0x16, 0x9, 0x0, 0x0 },	 // &
		{ 0x4, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0 },	 // '
		{ 0x2, 0x4, 0x4, 0x4, 0x2, 0x0, 0x0 },	 // (
		{ 0x8, 0x4, 0x4, 0x4, 0x8, 0x0, 0x0 },	 // )
		{ 0x15, 0xE, 0x4, 0xE, 0x15, 0x0, 0x0 },	 // *
		{ 0x4, 0x4, 0x1F, 0x4, 0x4, 0x0, 0x0 },	 // +
		{ 0x0, 0x0, 0x0, 0x4, 0x8, 0x0, 0x0 },	 // ,
		{ 0x0, 0x0, 0x1F, 0x0, 0x0, 0x0, 0x0 },	 // -
		{ 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0 },	 // .
		{ 0x1, 0x2, 0x4, 0x8, 0x10, 0x0, 0x0 },	 // /
		{ 0xE, 0x13, 0x15, 0x19, 0xE, 0x0, 0x0 },	 // 0
		{ 0x4, 0x4, 0x4, 0x4, 0x4, 0x0, 0x0 },	 // 1
		{ 0xE, 0x11, 0x2, 0x4, 0x1F, 0x0, 0x0 },	 // 2
		{ 0xE, 0x11, 0x6, 0x11, 0xE, 0x0, 0x0 },	 // 3
		{ 0x6, 0xA, 0x12, 0x1F, 0x2, 0x0, 0x0 },	 // 4
		{ 0x1F, 0x10, 0x1F, 0x1, 0x1F, 0x0, 0x0 },	 // 5
		{ 0xE, 0x10, 0x1E, 0x11, 0xE, 0x0, 0x0 },	 // 6
		{ 0x1F, 0x1, 0x2, 0x4, 0x4, 0x0, 0x0 },	 // 7
		{ 0xE, 0x11, 0xE, 0x11, 0xE, 0x0, 0x0 },	 // 8
		{ 0xE, 0x11, 0xF, 0x1, 0xE, 0x0, 0x0 },	 // 9
		{ 0x0, 0x4, 0x0, 0x4, 0x0, 0x0, 0x0 },	 // :
		{ 0x0, 0x4, 0x0, 0x4, 0x8, 0x0, 0x0 },	 // ;
		{ 0x2, 0x4, 0x8, 0x4, 0x2, 0x0, 0x0 },	 // <
		{ 0x0, 0x1F, 0x0, 0x1F, 0x0, 0x0, 0x0 },	 // =
		{ 0x8, 0x4, 0x2, 0x4, 0x8, 0x0, 0x0 },	 // >
		{ 0xE, 0x11, 0x2, 0x4, 0x4, 0x0, 0x0 },	 // ?
		{ 0xE, 0x13, 0x15, 0x15, 0xE, 0x0, 0x0 },	 // @
		{ 0x4, 0xA, 0x11, 0x1F, 0x11, 0x0, 0x0 },	 // A
		{ 0x1E, 0x11, 0x1E, 0x11, 0x1E, 0x0, 0x0 },	 // B
		{ 0xE, 0x11, 0x10, 0x11, 0xE, 0x0, 0x0 },	 // C
		{ 0x1E, 0x11, 0x11, 0x11, 0x1E, 0x0, 0x0 },	 // D
		{ 0x1F, 0x10, 0x1F, 0x10, 0x1F, 0x0, 0x0 },	 // E
		{ 0x1F, 0x10, 0x1E, 0x10, 0x10, 0x0, 0x0 },	 // F
		{ 0xE, 0x10, 0x13, 0x11, 0xE, 0x0, 0x0 },	 // G
		{ 0x11, 0x11, 0x1F, 0x11, 0x11, 0x0, 0x0 },	 // H
		{ 0xE, 0x4, 0x4, 0x4, 0xE, 0x0, 0x0 },	 // I
		{ 0x1, 0x1, 0x1, 0x11, 0xE, 0x0, 0x0 },	 // J
		{ 0x11, 0x12, 0x1C, 0x12, 0x11, 0x0, 0x0 },	 // K
		{ 0x10, 0x10, 0x10, 0x10, 0x1F, 0x0, 0x0 },	 // L
		{ 0x11, 0x1B, 0x15, 0x11, 0x11, 0x0, 0x0 },	 // M
		{ 0x11, 0x19, 0x15, 0x13, 0x11, 0x0, 0x0 },	 // N
		{ 0xE, 0x11, 0x11, 0x11, 0xE, 0x0, 0x0 },	 // O
		{ 0x1E, 0x11, 0x1E, 0x10, 0x10, 0x0, 0x0 },	 // P
		{ 0xE, 0x11, 0x11, 0x13, 0xF, 0x0, 0x0 },	 // Q
		{ 0x1E, 0x11, 0x1E, 0x12, 0x11, 0x0, 0x0 },	 // R
		{ 0xF, 0x10, 0xE, 0x1, 0x1E, 0x0, 0x0 },	 // S
		{ 0x1F, 0x4, 0x4, 0x4, 0x4, 0x0, 0x0 },	 // T
		{ 0x11, 0x11, 0x11, 0x11, 0xE, 0x0, 0x0 },	 // U
		{ 0x11, 0x11, 0x11, 0xA, 0x4, 0x0, 0x0 },	 // V
		{ 0x15, 0x15, 0x15, 0x15, 0xA, 0x0, 0x0 },	 // W
		{ 0x11, 0xA, 0x4, 0xA, 0x11, 0x0, 0x0 },	 // X
		{ 0x11, 0xA, 0x4, 0x4, 0x4, 0x0, 0x0 },	 // Y
		{ 0x1F, 0x2, 0x4, 0x8, 0x1F, 0x0, 0x0 },	 // Z
		{ 0xE, 0x8, 0x8, 0x8, 0xE, 0x0, 0x0 },	 // [
		{ 0x10, 0x8, 0x4, 0x2, 0x1, 0x0, 0x0 },	 // back-slash
		{ 0xE, 0x2, 0x2, 0x2, 0xE, 0x0, 0x0 },	 // ]
		{ 0x4, 0xA, 0x0, 0x0, 0x0, 0x0, 0x0 },	 // ^
		{ 0x0, 0x0, 0x0, 0x0, 0x1F, 0x0, 0x0 },	 // _
		{ 0x8, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0 },	 // `
		{ 0x0, 0xC, 0x12, 0x12, 0xD, 0x0, 0x0 },	 // a
		{ 0x0, 0x10, 0x1C, 0x12, 0x1C, 0x0, 0x0 },	 // b
		{ 0x0, 0xE, 0x10, 0x10, 0xE, 0x0, 0x0 },	 // c
		{ 0x2, 0x2, 0xE, 0x12, 0xE, 0x0, 0x0 },	 // d
		{ 0xC, 0x12, 0x1E, 0x10, 0xC, 0x0, 0x0 },	 // e
		{ 0x6, 0x4, 0xE, 0x4, 0x4, 0x0, 0x0 },	 // f
		{ 0x6, 0x9, 0x7, 0x1, 0x6, 0x0, 0x0 },	 // g
		{ 0x8, 0x8, 0xC, 0xA, 0xA, 0x0, 0x0 },	 // h
		{ 0x0, 0x4, 0x0, 0x4, 0x4, 0x0, 0x0 },	 // i
		{ 0x4, 0x0, 0x4, 0x4, 0xC, 0x0, 0x0 },	 // j
		{ 0x8, 0x8, 0xA, 0xC, 0xA, 0x0, 0x0 },	 // k
		{ 0xC, 0x4, 0x4, 0x4, 0x4, 0x0, 0x0 },	 // l
		{ 0x0, 0x0, 0xE, 0x15, 0x15, 0x0, 0x0 },	 // m
		{ 0x0, 0x0, 0xC, 0x12, 0x12, 0x0, 0x0 },	 // n
		{ 0x0, 0xC, 0x12, 0x12, 0xC, 0x0, 0x0 },	 // o
		{ 0x0, 0xC, 0x12, 0x1C, 0x10, 0x0, 0x0 },	 // p
		{ 0x0, 0xC, 0x12, 0xE, 0x2, 0x0, 0x0 },	 // q
		{ 0x0, 0x16, 0x18, 0x10, 0x10, 0x0, 0x0 },	 // r
		{ 0x6, 0x8, 0x4, 0x2, 0xC, 0x0, 0x0 },	 // s
		{ 0x0, 0x4, 0xE, 0x4, 0x6, 0x0, 0x0 },	 // t
		{ 0x0, 0x12, 0x12, 0x12, 0xD, 0x0, 0x0 },	 // u
		{ 0x0, 0x0, 0xA, 0xA, 0x4, 0x0, 0x0 },	 // v
		{ 0x0, 0x0, 0x15, 0x15, 0xA, 0x0, 0x0 },	 // w
		{ 0x0, 0x0, 0xA, 0x4, 0xA, 0x0, 0x0 },	 // x
		{ 0x0, 0xA, 0x4, 0x8, 0x10, 0x0, 0x0 },	 // y
		{ 0x0, 0xE, 0x2, 0x4, 0xE, 0x0, 0x0 },	 // z
		{ 0x6, 0x4, 0x8, 0x4, 0x6, 0x0, 0x0 },	 // {
		{ 0x4, 0x4, 0x4, 0x4, 0x4, 0x0, 0x0 },	 // |
		{ 0xC, 0x4, 0x2, 0x4, 0xC, 0x0, 0x0 },	 // }
		{ 0x8, 0x15, 0x2, 0x0, 0x0, 0x0, 0x0 },	 // ~
		{ 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0, 0x0 }	 // black square
	};

	// 7x5 font data (row-by-row)
	private static int[][] font7x5Row  = {
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// (white space)
		{0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04},	// !
		{0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00},	// "
		{0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A},	// #
		{0x40, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04},	// $
		{0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03},	// %
		{0x0C, 0x12, 0x14, 0x08, 0x15, 0x12, 0x0D},	// &
		{0x1C, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00},	// '
		{0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02},	// (
		{0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08},	// )
		{0x00, 0x04, 0x15, 0x0E, 0x15, 0x04, 0x00},	// *
		{0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00},	// +
		{0x00, 0x00, 0x00, 0x00, 0x0C, 0x04, 0x08},	// ,
		{0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00},	// -
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C},	// .
		{0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00},	// /
		{0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E},	// 0
		{0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0C},	// 1
		{0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F},	// 2
		{0x1F, 0x02, 0x04, 0x02, 0x01, 0x11, 0x0E},	// 3
		{0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02},	// 4
		{0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E},	// 5
		{0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E},	// 6
		{0x1F, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08},	// 7
		{0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E},	// 8
		{0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C},	// 9
		{0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00},	// :
		{0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x04, 0x08},	// ;
		{0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02},	// <
		{0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00},	// =
		{0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08},	// >
		{0x0E, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04},	// ?
		{0x0E, 0x11, 0x01, 0x0D, 0x15, 0x15, 0x0E},	// @
		{0x0E, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11},	// A
		{0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E},	// B
		{0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E},	// C
		{0x1C, 0x12, 0x11, 0x11, 0x11, 0x12, 0x1C},	// D
		{0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x1F},	// E
		{0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x10},	// F
		{0x0E, 0x11, 0x10, 0x17, 0x11, 0x11, 0x0F},	// G
		{0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11},	// H
		{0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E},	// I
		{0x07, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0C},	// J
		{0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11},	// K
		{0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F},	// L
		{0x11, 0x1B, 0x15, 0x15, 0x11, 0x11, 0x11},	// M
		{0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11},	// N
		{0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E},	// O
		{0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10},	// P
		{0x0E, 0x11, 0x11, 0x11, 0x15, 0x13, 0x0D},	// Q
		{0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11},	// R
		{0x0F, 0x10, 0x10, 0x0E, 0x01, 0x01, 0x1E},	// S
		{0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},	// T
		{0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E},	// U
		{0x11, 0x11, 0x11, 0x11, 0x11, 0x0A, 0x04},	// V
		{0x11, 0x11, 0x11, 0x15, 0x15, 0x15, 0x0A},	// W
		{0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11},	// X
		{0x11, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x04},	// Y
		{0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F},	// Z
		{0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E},	// [
		{0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00},	// (back slash)
		{0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E},	// ]
		{0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00},	// ^
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F},	// _
		{0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00},	// `
		{0x00, 0x00, 0x0E, 0x00, 0x0F, 0x11, 0x0F},	// a
		{0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x1E},	// b
		{0x00, 0x00, 0x0E, 0x10, 0x10, 0x11, 0x0E},	// c
		{0x01, 0x01, 0x0B, 0x13, 0x11, 0x11, 0x0F},	// d
		{0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0E},	// e
		{0x06, 0x09, 0x08, 0x1C, 0x08, 0x08, 0x08},	// f
		{0x00, 0x0F, 0x11, 0x11, 0x0F, 0x01, 0x0E},	// g
		{0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x11},	// h
		{0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x0E},	// i
		{0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0C},	// j
		{0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12},	// k
		{0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E},	// l
		{0x00, 0x00, 0x1A, 0x15, 0x15, 0x11, 0x11},	// m
		{0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11},	// n
		{0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E},	// o
		{0x00, 0x00, 0x1E, 0x11, 0x1E, 0x10, 0x10},	// p
		{0x00, 0x00, 0x0D, 0x13, 0x0F, 0x01, 0x01},	// q
		{0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10},	// r
		{0x00, 0x00, 0x0E, 0x10, 0x0E, 0x01, 0x1E},	// s
		{0x08, 0x08, 0x1C, 0x08, 0x08, 0x09, 0x06},	// t
		{0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0D},	// u
		{0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04},	// v
		{0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A},	// w
		{0x00, 0x00, 0x11, 0x0C, 0x04, 0x0C, 0x11},	// x
		{0x00, 0x00, 0x11, 0x11, 0x0F, 0x01, 0x0E},	// y
		{0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F},	// z
		{0x02, 0x04, 0x04, 0x08, 0x04, 0x04, 0x02},	// {
		{0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},	// |
		{0x08, 0x04, 0x04, 0x02, 0x04, 0x04, 0x08},	// }
		{0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00},	// ~
		{0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F}	// (black square)
	};	

	private static int[][][] fontData = {
		font5x5, font7x5
	};
		
	private static int[][][] rowFontData = {
		font5x5Row, font7x5Row
	};
		
	protected int[][] selPat(int sel) {
		return fontData[sel];
	}
		
	protected int[][] selRowPat(int sel) {
		return rowFontData[sel];
	}
		
	public void setUserStr(String str) {
		userStr = str;
	}
		
	public String getUserStr() {
		return this.userStr;
	}
		
	protected int[] getCharPattern(int fontSel, char ch) {
		int slice;
		
		if ( ch > ' ' && ch <= 0x7F )
			slice = ch - ' ';
		else
			slice = 0;
		return selPat(fontSel)[slice];
	}

	protected int[] getRowCharPattern(int fontSel, char ch) {
		int slice;
			
		if ( ch > ' ' && ch <= 0x7F )
			slice = ch - ' ';
		else
			slice = 0;
		return selRowPat(fontSel)[slice];
	}

	public void sendCharacter(int fontSel, char ch, int initTune, int displacement, int wait, boolean doubleWidth) {
		int[] pat;
			
	    pat = getCharPattern(fontSel, ch);
	    for (int i = 0; i <= 4; i++) {
	    	doOptionalTaskPerEveryColumn(getUserStr(), fontSel, ch, i);
	    	if ( (ch == ' ') && ( i == 3 ) )
	    		break;
	    	if ( (i == 0) && (pat[0] == 0) )
	    		continue;  
	    	doHellschreiber(fontSel, pat[i], initTune, displacement, wait, doubleWidth);
	    	if ( doubleWidth )
	    		doHellschreiber(fontSel, pat[i], initTune, displacement, wait, doubleWidth);
	    }
	    if ( pat[4] != 0 )
	    	doHellschreiber(fontSel, 0, initTune, displacement, wait, doubleWidth);
	    if ( doubleWidth )
	    	doHellschreiber(fontSel, 0, initTune, displacement, wait, doubleWidth);
	}

	public void doHellschreiber(int fontSel, int dat, int initTune, int displacement, int wait, boolean doubleWidth) {
		int rowSize, mask;
			
		switch (fontSel) {
			case OPT_FONT5x5:
				rowSize = 5; mask = 0x10;
				break;
			case OPT_FONT7x5:
				rowSize = 7; mask = 0x40;
				break;
			default:
				rowSize = 5; mask = 0x10;
				break;
		}
		for (int i = 1; i <= rowSize; i++ ) {
			doOptionalTaskPerEveryPixel(getUserStr(), fontSel, i, dat & mask);
		    changeMasterTune(initTune);
		    if ( (dat & mask) != 0 ) {
		      sendMIDImsg(0x90, 90, 127);
		      delay(wait);
		      sendMIDImsg(0x80, 90, 127);
		    } else {
		      if ( doubleWidth )
		        delay(wait / 4);
		      else
		    	  delay(wait / 2);
		    }
		    dat = dat << 1;
		    initTune += displacement;
		}
	}
		
	protected void sendMIDImsg(int stat, int data1, int data2) {
		MIDIOut(stat);
		MIDIOut(data1);
		MIDIOut(data2);
	}
		
	protected void sendMIDImsg2(int stat, int data) {
		MIDIOut(stat);
		MIDIOut(data);
	}
		
	protected void vsendMIDImsg(int... args) {
		for (int i : args)
			MIDIOut(i);
	}
		
	protected void doOptionalTaskPerEveryColumn(String str, int fontSel, char ch, int curPos) {
		// This method may be overridden in subclasses for future extension, called by sendCharacter() 
	}
		
	protected void doOptionalTaskPerEveryPixel(String str, int fontSel, int row, int pixelStat) {
		// This method may be overridden in subclasses for future extension, called by doHellschreiber()
	}
		
	protected abstract void changeMasterTune(int tune);	// send MIDI message to change master tune property
	public abstract void delay(long milliSec);
	protected abstract void initSoundModule();
	protected abstract void MIDIOut(int data);
}
